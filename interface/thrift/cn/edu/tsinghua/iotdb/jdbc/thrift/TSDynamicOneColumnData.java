/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.tsinghua.iotdb.jdbc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSDynamicOneColumnData implements org.apache.thrift.TBase<TSDynamicOneColumnData, TSDynamicOneColumnData._Fields>, java.io.Serializable, Cloneable, Comparable<TSDynamicOneColumnData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSDynamicOneColumnData");

  private static final org.apache.thrift.protocol.TField DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_RET_FIELD_DESC = new org.apache.thrift.protocol.TField("timeRet", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField BOOL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("boolList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField I32_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i32List", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField I64_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("i64List", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField FLOAT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("floatList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DOUBLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField BINARY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField EMPTY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("emptyList", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSDynamicOneColumnDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSDynamicOneColumnDataTupleSchemeFactory());
  }

  public String deviceType; // required
  public String dataType; // required
  public int length; // required
  public List<Long> timeRet; // required
  public List<Boolean> boolList; // optional
  public List<Integer> i32List; // optional
  public List<Long> i64List; // optional
  public List<Double> floatList; // optional
  public List<Double> doubleList; // optional
  public List<ByteBuffer> binaryList; // optional
  public List<Long> emptyList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_TYPE((short)1, "deviceType"),
    DATA_TYPE((short)2, "dataType"),
    LENGTH((short)3, "length"),
    TIME_RET((short)4, "timeRet"),
    BOOL_LIST((short)5, "boolList"),
    I32_LIST((short)6, "i32List"),
    I64_LIST((short)7, "i64List"),
    FLOAT_LIST((short)8, "floatList"),
    DOUBLE_LIST((short)9, "doubleList"),
    BINARY_LIST((short)10, "binaryList"),
    EMPTY_LIST((short)11, "emptyList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_TYPE
          return DEVICE_TYPE;
        case 2: // DATA_TYPE
          return DATA_TYPE;
        case 3: // LENGTH
          return LENGTH;
        case 4: // TIME_RET
          return TIME_RET;
        case 5: // BOOL_LIST
          return BOOL_LIST;
        case 6: // I32_LIST
          return I32_LIST;
        case 7: // I64_LIST
          return I64_LIST;
        case 8: // FLOAT_LIST
          return FLOAT_LIST;
        case 9: // DOUBLE_LIST
          return DOUBLE_LIST;
        case 10: // BINARY_LIST
          return BINARY_LIST;
        case 11: // EMPTY_LIST
          return EMPTY_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LENGTH_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.BOOL_LIST,_Fields.I32_LIST,_Fields.I64_LIST,_Fields.FLOAT_LIST,_Fields.DOUBLE_LIST,_Fields.BINARY_LIST,_Fields.EMPTY_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deviceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_RET, new org.apache.thrift.meta_data.FieldMetaData("timeRet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.BOOL_LIST, new org.apache.thrift.meta_data.FieldMetaData("boolList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.I32_LIST, new org.apache.thrift.meta_data.FieldMetaData("i32List", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.I64_LIST, new org.apache.thrift.meta_data.FieldMetaData("i64List", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.FLOAT_LIST, new org.apache.thrift.meta_data.FieldMetaData("floatList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.DOUBLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("doubleList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.BINARY_LIST, new org.apache.thrift.meta_data.FieldMetaData("binaryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.EMPTY_LIST, new org.apache.thrift.meta_data.FieldMetaData("emptyList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSDynamicOneColumnData.class, metaDataMap);
  }

  public TSDynamicOneColumnData() {
  }

  public TSDynamicOneColumnData(
    String deviceType,
    String dataType,
    int length,
    List<Long> timeRet)
  {
    this();
    this.deviceType = deviceType;
    this.dataType = dataType;
    this.length = length;
    setLengthIsSet(true);
    this.timeRet = timeRet;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSDynamicOneColumnData(TSDynamicOneColumnData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDeviceType()) {
      this.deviceType = other.deviceType;
    }
    if (other.isSetDataType()) {
      this.dataType = other.dataType;
    }
    this.length = other.length;
    if (other.isSetTimeRet()) {
      List<Long> __this__timeRet = new ArrayList<Long>(other.timeRet);
      this.timeRet = __this__timeRet;
    }
    if (other.isSetBoolList()) {
      List<Boolean> __this__boolList = new ArrayList<Boolean>(other.boolList);
      this.boolList = __this__boolList;
    }
    if (other.isSetI32List()) {
      List<Integer> __this__i32List = new ArrayList<Integer>(other.i32List);
      this.i32List = __this__i32List;
    }
    if (other.isSetI64List()) {
      List<Long> __this__i64List = new ArrayList<Long>(other.i64List);
      this.i64List = __this__i64List;
    }
    if (other.isSetFloatList()) {
      List<Double> __this__floatList = new ArrayList<Double>(other.floatList);
      this.floatList = __this__floatList;
    }
    if (other.isSetDoubleList()) {
      List<Double> __this__doubleList = new ArrayList<Double>(other.doubleList);
      this.doubleList = __this__doubleList;
    }
    if (other.isSetBinaryList()) {
      List<ByteBuffer> __this__binaryList = new ArrayList<ByteBuffer>(other.binaryList);
      this.binaryList = __this__binaryList;
    }
    if (other.isSetEmptyList()) {
      List<Long> __this__emptyList = new ArrayList<Long>(other.emptyList);
      this.emptyList = __this__emptyList;
    }
  }

  public TSDynamicOneColumnData deepCopy() {
    return new TSDynamicOneColumnData(this);
  }

  @Override
  public void clear() {
    this.deviceType = null;
    this.dataType = null;
    setLengthIsSet(false);
    this.length = 0;
    this.timeRet = null;
    this.boolList = null;
    this.i32List = null;
    this.i64List = null;
    this.floatList = null;
    this.doubleList = null;
    this.binaryList = null;
    this.emptyList = null;
  }

  public String getDeviceType() {
    return this.deviceType;
  }

  public TSDynamicOneColumnData setDeviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  public void unsetDeviceType() {
    this.deviceType = null;
  }

  /** Returns true if field deviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceType() {
    return this.deviceType != null;
  }

  public void setDeviceTypeIsSet(boolean value) {
    if (!value) {
      this.deviceType = null;
    }
  }

  public String getDataType() {
    return this.dataType;
  }

  public TSDynamicOneColumnData setDataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  public void unsetDataType() {
    this.dataType = null;
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return this.dataType != null;
  }

  public void setDataTypeIsSet(boolean value) {
    if (!value) {
      this.dataType = null;
    }
  }

  public int getLength() {
    return this.length;
  }

  public TSDynamicOneColumnData setLength(int length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public int getTimeRetSize() {
    return (this.timeRet == null) ? 0 : this.timeRet.size();
  }

  public java.util.Iterator<Long> getTimeRetIterator() {
    return (this.timeRet == null) ? null : this.timeRet.iterator();
  }

  public void addToTimeRet(long elem) {
    if (this.timeRet == null) {
      this.timeRet = new ArrayList<Long>();
    }
    this.timeRet.add(elem);
  }

  public List<Long> getTimeRet() {
    return this.timeRet;
  }

  public TSDynamicOneColumnData setTimeRet(List<Long> timeRet) {
    this.timeRet = timeRet;
    return this;
  }

  public void unsetTimeRet() {
    this.timeRet = null;
  }

  /** Returns true if field timeRet is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeRet() {
    return this.timeRet != null;
  }

  public void setTimeRetIsSet(boolean value) {
    if (!value) {
      this.timeRet = null;
    }
  }

  public int getBoolListSize() {
    return (this.boolList == null) ? 0 : this.boolList.size();
  }

  public java.util.Iterator<Boolean> getBoolListIterator() {
    return (this.boolList == null) ? null : this.boolList.iterator();
  }

  public void addToBoolList(boolean elem) {
    if (this.boolList == null) {
      this.boolList = new ArrayList<Boolean>();
    }
    this.boolList.add(elem);
  }

  public List<Boolean> getBoolList() {
    return this.boolList;
  }

  public TSDynamicOneColumnData setBoolList(List<Boolean> boolList) {
    this.boolList = boolList;
    return this;
  }

  public void unsetBoolList() {
    this.boolList = null;
  }

  /** Returns true if field boolList is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolList() {
    return this.boolList != null;
  }

  public void setBoolListIsSet(boolean value) {
    if (!value) {
      this.boolList = null;
    }
  }

  public int getI32ListSize() {
    return (this.i32List == null) ? 0 : this.i32List.size();
  }

  public java.util.Iterator<Integer> getI32ListIterator() {
    return (this.i32List == null) ? null : this.i32List.iterator();
  }

  public void addToI32List(int elem) {
    if (this.i32List == null) {
      this.i32List = new ArrayList<Integer>();
    }
    this.i32List.add(elem);
  }

  public List<Integer> getI32List() {
    return this.i32List;
  }

  public TSDynamicOneColumnData setI32List(List<Integer> i32List) {
    this.i32List = i32List;
    return this;
  }

  public void unsetI32List() {
    this.i32List = null;
  }

  /** Returns true if field i32List is set (has been assigned a value) and false otherwise */
  public boolean isSetI32List() {
    return this.i32List != null;
  }

  public void setI32ListIsSet(boolean value) {
    if (!value) {
      this.i32List = null;
    }
  }

  public int getI64ListSize() {
    return (this.i64List == null) ? 0 : this.i64List.size();
  }

  public java.util.Iterator<Long> getI64ListIterator() {
    return (this.i64List == null) ? null : this.i64List.iterator();
  }

  public void addToI64List(long elem) {
    if (this.i64List == null) {
      this.i64List = new ArrayList<Long>();
    }
    this.i64List.add(elem);
  }

  public List<Long> getI64List() {
    return this.i64List;
  }

  public TSDynamicOneColumnData setI64List(List<Long> i64List) {
    this.i64List = i64List;
    return this;
  }

  public void unsetI64List() {
    this.i64List = null;
  }

  /** Returns true if field i64List is set (has been assigned a value) and false otherwise */
  public boolean isSetI64List() {
    return this.i64List != null;
  }

  public void setI64ListIsSet(boolean value) {
    if (!value) {
      this.i64List = null;
    }
  }

  public int getFloatListSize() {
    return (this.floatList == null) ? 0 : this.floatList.size();
  }

  public java.util.Iterator<Double> getFloatListIterator() {
    return (this.floatList == null) ? null : this.floatList.iterator();
  }

  public void addToFloatList(double elem) {
    if (this.floatList == null) {
      this.floatList = new ArrayList<Double>();
    }
    this.floatList.add(elem);
  }

  public List<Double> getFloatList() {
    return this.floatList;
  }

  public TSDynamicOneColumnData setFloatList(List<Double> floatList) {
    this.floatList = floatList;
    return this;
  }

  public void unsetFloatList() {
    this.floatList = null;
  }

  /** Returns true if field floatList is set (has been assigned a value) and false otherwise */
  public boolean isSetFloatList() {
    return this.floatList != null;
  }

  public void setFloatListIsSet(boolean value) {
    if (!value) {
      this.floatList = null;
    }
  }

  public int getDoubleListSize() {
    return (this.doubleList == null) ? 0 : this.doubleList.size();
  }

  public java.util.Iterator<Double> getDoubleListIterator() {
    return (this.doubleList == null) ? null : this.doubleList.iterator();
  }

  public void addToDoubleList(double elem) {
    if (this.doubleList == null) {
      this.doubleList = new ArrayList<Double>();
    }
    this.doubleList.add(elem);
  }

  public List<Double> getDoubleList() {
    return this.doubleList;
  }

  public TSDynamicOneColumnData setDoubleList(List<Double> doubleList) {
    this.doubleList = doubleList;
    return this;
  }

  public void unsetDoubleList() {
    this.doubleList = null;
  }

  /** Returns true if field doubleList is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleList() {
    return this.doubleList != null;
  }

  public void setDoubleListIsSet(boolean value) {
    if (!value) {
      this.doubleList = null;
    }
  }

  public int getBinaryListSize() {
    return (this.binaryList == null) ? 0 : this.binaryList.size();
  }

  public java.util.Iterator<ByteBuffer> getBinaryListIterator() {
    return (this.binaryList == null) ? null : this.binaryList.iterator();
  }

  public void addToBinaryList(ByteBuffer elem) {
    if (this.binaryList == null) {
      this.binaryList = new ArrayList<ByteBuffer>();
    }
    this.binaryList.add(elem);
  }

  public List<ByteBuffer> getBinaryList() {
    return this.binaryList;
  }

  public TSDynamicOneColumnData setBinaryList(List<ByteBuffer> binaryList) {
    this.binaryList = binaryList;
    return this;
  }

  public void unsetBinaryList() {
    this.binaryList = null;
  }

  /** Returns true if field binaryList is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryList() {
    return this.binaryList != null;
  }

  public void setBinaryListIsSet(boolean value) {
    if (!value) {
      this.binaryList = null;
    }
  }

  public int getEmptyListSize() {
    return (this.emptyList == null) ? 0 : this.emptyList.size();
  }

  public java.util.Iterator<Long> getEmptyListIterator() {
    return (this.emptyList == null) ? null : this.emptyList.iterator();
  }

  public void addToEmptyList(long elem) {
    if (this.emptyList == null) {
      this.emptyList = new ArrayList<Long>();
    }
    this.emptyList.add(elem);
  }

  public List<Long> getEmptyList() {
    return this.emptyList;
  }

  public TSDynamicOneColumnData setEmptyList(List<Long> emptyList) {
    this.emptyList = emptyList;
    return this;
  }

  public void unsetEmptyList() {
    this.emptyList = null;
  }

  /** Returns true if field emptyList is set (has been assigned a value) and false otherwise */
  public boolean isSetEmptyList() {
    return this.emptyList != null;
  }

  public void setEmptyListIsSet(boolean value) {
    if (!value) {
      this.emptyList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICE_TYPE:
      if (value == null) {
        unsetDeviceType();
      } else {
        setDeviceType((String)value);
      }
      break;

    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((String)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Integer)value);
      }
      break;

    case TIME_RET:
      if (value == null) {
        unsetTimeRet();
      } else {
        setTimeRet((List<Long>)value);
      }
      break;

    case BOOL_LIST:
      if (value == null) {
        unsetBoolList();
      } else {
        setBoolList((List<Boolean>)value);
      }
      break;

    case I32_LIST:
      if (value == null) {
        unsetI32List();
      } else {
        setI32List((List<Integer>)value);
      }
      break;

    case I64_LIST:
      if (value == null) {
        unsetI64List();
      } else {
        setI64List((List<Long>)value);
      }
      break;

    case FLOAT_LIST:
      if (value == null) {
        unsetFloatList();
      } else {
        setFloatList((List<Double>)value);
      }
      break;

    case DOUBLE_LIST:
      if (value == null) {
        unsetDoubleList();
      } else {
        setDoubleList((List<Double>)value);
      }
      break;

    case BINARY_LIST:
      if (value == null) {
        unsetBinaryList();
      } else {
        setBinaryList((List<ByteBuffer>)value);
      }
      break;

    case EMPTY_LIST:
      if (value == null) {
        unsetEmptyList();
      } else {
        setEmptyList((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_TYPE:
      return getDeviceType();

    case DATA_TYPE:
      return getDataType();

    case LENGTH:
      return Integer.valueOf(getLength());

    case TIME_RET:
      return getTimeRet();

    case BOOL_LIST:
      return getBoolList();

    case I32_LIST:
      return getI32List();

    case I64_LIST:
      return getI64List();

    case FLOAT_LIST:
      return getFloatList();

    case DOUBLE_LIST:
      return getDoubleList();

    case BINARY_LIST:
      return getBinaryList();

    case EMPTY_LIST:
      return getEmptyList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_TYPE:
      return isSetDeviceType();
    case DATA_TYPE:
      return isSetDataType();
    case LENGTH:
      return isSetLength();
    case TIME_RET:
      return isSetTimeRet();
    case BOOL_LIST:
      return isSetBoolList();
    case I32_LIST:
      return isSetI32List();
    case I64_LIST:
      return isSetI64List();
    case FLOAT_LIST:
      return isSetFloatList();
    case DOUBLE_LIST:
      return isSetDoubleList();
    case BINARY_LIST:
      return isSetBinaryList();
    case EMPTY_LIST:
      return isSetEmptyList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSDynamicOneColumnData)
      return this.equals((TSDynamicOneColumnData)that);
    return false;
  }

  public boolean equals(TSDynamicOneColumnData that) {
    if (that == null)
      return false;

    boolean this_present_deviceType = true && this.isSetDeviceType();
    boolean that_present_deviceType = true && that.isSetDeviceType();
    if (this_present_deviceType || that_present_deviceType) {
      if (!(this_present_deviceType && that_present_deviceType))
        return false;
      if (!this.deviceType.equals(that.deviceType))
        return false;
    }

    boolean this_present_dataType = true && this.isSetDataType();
    boolean that_present_dataType = true && that.isSetDataType();
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (!this.dataType.equals(that.dataType))
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_timeRet = true && this.isSetTimeRet();
    boolean that_present_timeRet = true && that.isSetTimeRet();
    if (this_present_timeRet || that_present_timeRet) {
      if (!(this_present_timeRet && that_present_timeRet))
        return false;
      if (!this.timeRet.equals(that.timeRet))
        return false;
    }

    boolean this_present_boolList = true && this.isSetBoolList();
    boolean that_present_boolList = true && that.isSetBoolList();
    if (this_present_boolList || that_present_boolList) {
      if (!(this_present_boolList && that_present_boolList))
        return false;
      if (!this.boolList.equals(that.boolList))
        return false;
    }

    boolean this_present_i32List = true && this.isSetI32List();
    boolean that_present_i32List = true && that.isSetI32List();
    if (this_present_i32List || that_present_i32List) {
      if (!(this_present_i32List && that_present_i32List))
        return false;
      if (!this.i32List.equals(that.i32List))
        return false;
    }

    boolean this_present_i64List = true && this.isSetI64List();
    boolean that_present_i64List = true && that.isSetI64List();
    if (this_present_i64List || that_present_i64List) {
      if (!(this_present_i64List && that_present_i64List))
        return false;
      if (!this.i64List.equals(that.i64List))
        return false;
    }

    boolean this_present_floatList = true && this.isSetFloatList();
    boolean that_present_floatList = true && that.isSetFloatList();
    if (this_present_floatList || that_present_floatList) {
      if (!(this_present_floatList && that_present_floatList))
        return false;
      if (!this.floatList.equals(that.floatList))
        return false;
    }

    boolean this_present_doubleList = true && this.isSetDoubleList();
    boolean that_present_doubleList = true && that.isSetDoubleList();
    if (this_present_doubleList || that_present_doubleList) {
      if (!(this_present_doubleList && that_present_doubleList))
        return false;
      if (!this.doubleList.equals(that.doubleList))
        return false;
    }

    boolean this_present_binaryList = true && this.isSetBinaryList();
    boolean that_present_binaryList = true && that.isSetBinaryList();
    if (this_present_binaryList || that_present_binaryList) {
      if (!(this_present_binaryList && that_present_binaryList))
        return false;
      if (!this.binaryList.equals(that.binaryList))
        return false;
    }

    boolean this_present_emptyList = true && this.isSetEmptyList();
    boolean that_present_emptyList = true && that.isSetEmptyList();
    if (this_present_emptyList || that_present_emptyList) {
      if (!(this_present_emptyList && that_present_emptyList))
        return false;
      if (!this.emptyList.equals(that.emptyList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TSDynamicOneColumnData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDeviceType()).compareTo(other.isSetDeviceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceType, other.deviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeRet()).compareTo(other.isSetTimeRet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeRet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRet, other.timeRet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolList()).compareTo(other.isSetBoolList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolList, other.boolList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32List()).compareTo(other.isSetI32List());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32List()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32List, other.i32List);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64List()).compareTo(other.isSetI64List());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64List()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64List, other.i64List);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloatList()).compareTo(other.isSetFloatList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloatList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floatList, other.floatList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleList()).compareTo(other.isSetDoubleList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleList, other.doubleList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryList()).compareTo(other.isSetBinaryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryList, other.binaryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmptyList()).compareTo(other.isSetEmptyList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmptyList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emptyList, other.emptyList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSDynamicOneColumnData(");
    boolean first = true;

    sb.append("deviceType:");
    if (this.deviceType == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataType:");
    if (this.dataType == null) {
      sb.append("null");
    } else {
      sb.append(this.dataType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeRet:");
    if (this.timeRet == null) {
      sb.append("null");
    } else {
      sb.append(this.timeRet);
    }
    first = false;
    if (isSetBoolList()) {
      if (!first) sb.append(", ");
      sb.append("boolList:");
      if (this.boolList == null) {
        sb.append("null");
      } else {
        sb.append(this.boolList);
      }
      first = false;
    }
    if (isSetI32List()) {
      if (!first) sb.append(", ");
      sb.append("i32List:");
      if (this.i32List == null) {
        sb.append("null");
      } else {
        sb.append(this.i32List);
      }
      first = false;
    }
    if (isSetI64List()) {
      if (!first) sb.append(", ");
      sb.append("i64List:");
      if (this.i64List == null) {
        sb.append("null");
      } else {
        sb.append(this.i64List);
      }
      first = false;
    }
    if (isSetFloatList()) {
      if (!first) sb.append(", ");
      sb.append("floatList:");
      if (this.floatList == null) {
        sb.append("null");
      } else {
        sb.append(this.floatList);
      }
      first = false;
    }
    if (isSetDoubleList()) {
      if (!first) sb.append(", ");
      sb.append("doubleList:");
      if (this.doubleList == null) {
        sb.append("null");
      } else {
        sb.append(this.doubleList);
      }
      first = false;
    }
    if (isSetBinaryList()) {
      if (!first) sb.append(", ");
      sb.append("binaryList:");
      if (this.binaryList == null) {
        sb.append("null");
      } else {
        sb.append(this.binaryList);
      }
      first = false;
    }
    if (isSetEmptyList()) {
      if (!first) sb.append(", ");
      sb.append("emptyList:");
      if (this.emptyList == null) {
        sb.append("null");
      } else {
        sb.append(this.emptyList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (deviceType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deviceType' was not present! Struct: " + toString());
    }
    if (dataType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'length' because it's a primitive and you chose the non-beans generator.
    if (timeRet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeRet' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSDynamicOneColumnDataStandardSchemeFactory implements SchemeFactory {
    public TSDynamicOneColumnDataStandardScheme getScheme() {
      return new TSDynamicOneColumnDataStandardScheme();
    }
  }

  private static class TSDynamicOneColumnDataStandardScheme extends StandardScheme<TSDynamicOneColumnData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSDynamicOneColumnData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceType = iprot.readString();
              struct.setDeviceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataType = iprot.readString();
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.length = iprot.readI32();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME_RET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.timeRet = new ArrayList<Long>(_list52.size);
                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                {
                  long _elem54;
                  _elem54 = iprot.readI64();
                  struct.timeRet.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setTimeRetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BOOL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                struct.boolList = new ArrayList<Boolean>(_list55.size);
                for (int _i56 = 0; _i56 < _list55.size; ++_i56)
                {
                  boolean _elem57;
                  _elem57 = iprot.readBool();
                  struct.boolList.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setBoolListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // I32_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.i32List = new ArrayList<Integer>(_list58.size);
                for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                {
                  int _elem60;
                  _elem60 = iprot.readI32();
                  struct.i32List.add(_elem60);
                }
                iprot.readListEnd();
              }
              struct.setI32ListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // I64_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                struct.i64List = new ArrayList<Long>(_list61.size);
                for (int _i62 = 0; _i62 < _list61.size; ++_i62)
                {
                  long _elem63;
                  _elem63 = iprot.readI64();
                  struct.i64List.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setI64ListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FLOAT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.floatList = new ArrayList<Double>(_list64.size);
                for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                {
                  double _elem66;
                  _elem66 = iprot.readDouble();
                  struct.floatList.add(_elem66);
                }
                iprot.readListEnd();
              }
              struct.setFloatListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DOUBLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.doubleList = new ArrayList<Double>(_list67.size);
                for (int _i68 = 0; _i68 < _list67.size; ++_i68)
                {
                  double _elem69;
                  _elem69 = iprot.readDouble();
                  struct.doubleList.add(_elem69);
                }
                iprot.readListEnd();
              }
              struct.setDoubleListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BINARY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.binaryList = new ArrayList<ByteBuffer>(_list70.size);
                for (int _i71 = 0; _i71 < _list70.size; ++_i71)
                {
                  ByteBuffer _elem72;
                  _elem72 = iprot.readBinary();
                  struct.binaryList.add(_elem72);
                }
                iprot.readListEnd();
              }
              struct.setBinaryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EMPTY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
                struct.emptyList = new ArrayList<Long>(_list73.size);
                for (int _i74 = 0; _i74 < _list73.size; ++_i74)
                {
                  long _elem75;
                  _elem75 = iprot.readI64();
                  struct.emptyList.add(_elem75);
                }
                iprot.readListEnd();
              }
              struct.setEmptyListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'length' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSDynamicOneColumnData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deviceType != null) {
        oprot.writeFieldBegin(DEVICE_TYPE_FIELD_DESC);
        oprot.writeString(struct.deviceType);
        oprot.writeFieldEnd();
      }
      if (struct.dataType != null) {
        oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
        oprot.writeString(struct.dataType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(struct.length);
      oprot.writeFieldEnd();
      if (struct.timeRet != null) {
        oprot.writeFieldBegin(TIME_RET_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.timeRet.size()));
          for (long _iter76 : struct.timeRet)
          {
            oprot.writeI64(_iter76);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.boolList != null) {
        if (struct.isSetBoolList()) {
          oprot.writeFieldBegin(BOOL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.boolList.size()));
            for (boolean _iter77 : struct.boolList)
            {
              oprot.writeBool(_iter77);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.i32List != null) {
        if (struct.isSetI32List()) {
          oprot.writeFieldBegin(I32_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.i32List.size()));
            for (int _iter78 : struct.i32List)
            {
              oprot.writeI32(_iter78);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.i64List != null) {
        if (struct.isSetI64List()) {
          oprot.writeFieldBegin(I64_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.i64List.size()));
            for (long _iter79 : struct.i64List)
            {
              oprot.writeI64(_iter79);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.floatList != null) {
        if (struct.isSetFloatList()) {
          oprot.writeFieldBegin(FLOAT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.floatList.size()));
            for (double _iter80 : struct.floatList)
            {
              oprot.writeDouble(_iter80);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.doubleList != null) {
        if (struct.isSetDoubleList()) {
          oprot.writeFieldBegin(DOUBLE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.doubleList.size()));
            for (double _iter81 : struct.doubleList)
            {
              oprot.writeDouble(_iter81);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.binaryList != null) {
        if (struct.isSetBinaryList()) {
          oprot.writeFieldBegin(BINARY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.binaryList.size()));
            for (ByteBuffer _iter82 : struct.binaryList)
            {
              oprot.writeBinary(_iter82);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.emptyList != null) {
        if (struct.isSetEmptyList()) {
          oprot.writeFieldBegin(EMPTY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.emptyList.size()));
            for (long _iter83 : struct.emptyList)
            {
              oprot.writeI64(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSDynamicOneColumnDataTupleSchemeFactory implements SchemeFactory {
    public TSDynamicOneColumnDataTupleScheme getScheme() {
      return new TSDynamicOneColumnDataTupleScheme();
    }
  }

  private static class TSDynamicOneColumnDataTupleScheme extends TupleScheme<TSDynamicOneColumnData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSDynamicOneColumnData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.deviceType);
      oprot.writeString(struct.dataType);
      oprot.writeI32(struct.length);
      {
        oprot.writeI32(struct.timeRet.size());
        for (long _iter84 : struct.timeRet)
        {
          oprot.writeI64(_iter84);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetBoolList()) {
        optionals.set(0);
      }
      if (struct.isSetI32List()) {
        optionals.set(1);
      }
      if (struct.isSetI64List()) {
        optionals.set(2);
      }
      if (struct.isSetFloatList()) {
        optionals.set(3);
      }
      if (struct.isSetDoubleList()) {
        optionals.set(4);
      }
      if (struct.isSetBinaryList()) {
        optionals.set(5);
      }
      if (struct.isSetEmptyList()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBoolList()) {
        {
          oprot.writeI32(struct.boolList.size());
          for (boolean _iter85 : struct.boolList)
          {
            oprot.writeBool(_iter85);
          }
        }
      }
      if (struct.isSetI32List()) {
        {
          oprot.writeI32(struct.i32List.size());
          for (int _iter86 : struct.i32List)
          {
            oprot.writeI32(_iter86);
          }
        }
      }
      if (struct.isSetI64List()) {
        {
          oprot.writeI32(struct.i64List.size());
          for (long _iter87 : struct.i64List)
          {
            oprot.writeI64(_iter87);
          }
        }
      }
      if (struct.isSetFloatList()) {
        {
          oprot.writeI32(struct.floatList.size());
          for (double _iter88 : struct.floatList)
          {
            oprot.writeDouble(_iter88);
          }
        }
      }
      if (struct.isSetDoubleList()) {
        {
          oprot.writeI32(struct.doubleList.size());
          for (double _iter89 : struct.doubleList)
          {
            oprot.writeDouble(_iter89);
          }
        }
      }
      if (struct.isSetBinaryList()) {
        {
          oprot.writeI32(struct.binaryList.size());
          for (ByteBuffer _iter90 : struct.binaryList)
          {
            oprot.writeBinary(_iter90);
          }
        }
      }
      if (struct.isSetEmptyList()) {
        {
          oprot.writeI32(struct.emptyList.size());
          for (long _iter91 : struct.emptyList)
          {
            oprot.writeI64(_iter91);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSDynamicOneColumnData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.deviceType = iprot.readString();
      struct.setDeviceTypeIsSet(true);
      struct.dataType = iprot.readString();
      struct.setDataTypeIsSet(true);
      struct.length = iprot.readI32();
      struct.setLengthIsSet(true);
      {
        org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.timeRet = new ArrayList<Long>(_list92.size);
        for (int _i93 = 0; _i93 < _list92.size; ++_i93)
        {
          long _elem94;
          _elem94 = iprot.readI64();
          struct.timeRet.add(_elem94);
        }
      }
      struct.setTimeRetIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.boolList = new ArrayList<Boolean>(_list95.size);
          for (int _i96 = 0; _i96 < _list95.size; ++_i96)
          {
            boolean _elem97;
            _elem97 = iprot.readBool();
            struct.boolList.add(_elem97);
          }
        }
        struct.setBoolListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.i32List = new ArrayList<Integer>(_list98.size);
          for (int _i99 = 0; _i99 < _list98.size; ++_i99)
          {
            int _elem100;
            _elem100 = iprot.readI32();
            struct.i32List.add(_elem100);
          }
        }
        struct.setI32ListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.i64List = new ArrayList<Long>(_list101.size);
          for (int _i102 = 0; _i102 < _list101.size; ++_i102)
          {
            long _elem103;
            _elem103 = iprot.readI64();
            struct.i64List.add(_elem103);
          }
        }
        struct.setI64ListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list104 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.floatList = new ArrayList<Double>(_list104.size);
          for (int _i105 = 0; _i105 < _list104.size; ++_i105)
          {
            double _elem106;
            _elem106 = iprot.readDouble();
            struct.floatList.add(_elem106);
          }
        }
        struct.setFloatListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list107 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.doubleList = new ArrayList<Double>(_list107.size);
          for (int _i108 = 0; _i108 < _list107.size; ++_i108)
          {
            double _elem109;
            _elem109 = iprot.readDouble();
            struct.doubleList.add(_elem109);
          }
        }
        struct.setDoubleListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list110 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.binaryList = new ArrayList<ByteBuffer>(_list110.size);
          for (int _i111 = 0; _i111 < _list110.size; ++_i111)
          {
            ByteBuffer _elem112;
            _elem112 = iprot.readBinary();
            struct.binaryList.add(_elem112);
          }
        }
        struct.setBinaryListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.emptyList = new ArrayList<Long>(_list113.size);
          for (int _i114 = 0; _i114 < _list113.size; ++_i114)
          {
            long _elem115;
            _elem115 = iprot.readI64();
            struct.emptyList.add(_elem115);
          }
        }
        struct.setEmptyListIsSet(true);
      }
    }
  }

}

