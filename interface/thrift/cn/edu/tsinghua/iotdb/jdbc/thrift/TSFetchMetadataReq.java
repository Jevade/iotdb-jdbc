/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.edu.tsinghua.iotdb.jdbc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSFetchMetadataReq implements org.apache.thrift.TBase<TSFetchMetadataReq, TSFetchMetadataReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSFetchMetadataReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSFetchMetadataReq");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("columnPath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BATCH_FETCH_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("batchFetchIdx", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSFetchMetadataReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSFetchMetadataReqTupleSchemeFactory());
  }

  public String type; // required
  public String columnPath; // optional
  public int batchFetchIdx; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    COLUMN_PATH((short)2, "columnPath"),
    BATCH_FETCH_IDX((short)3, "batchFetchIdx");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // COLUMN_PATH
          return COLUMN_PATH;
        case 3: // BATCH_FETCH_IDX
          return BATCH_FETCH_IDX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BATCHFETCHIDX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COLUMN_PATH,_Fields.BATCH_FETCH_IDX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_PATH, new org.apache.thrift.meta_data.FieldMetaData("columnPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATCH_FETCH_IDX, new org.apache.thrift.meta_data.FieldMetaData("batchFetchIdx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSFetchMetadataReq.class, metaDataMap);
  }

  public TSFetchMetadataReq() {
  }

  public TSFetchMetadataReq(
    String type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSFetchMetadataReq(TSFetchMetadataReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetColumnPath()) {
      this.columnPath = other.columnPath;
    }
    this.batchFetchIdx = other.batchFetchIdx;
  }

  public TSFetchMetadataReq deepCopy() {
    return new TSFetchMetadataReq(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.columnPath = null;
    setBatchFetchIdxIsSet(false);
    this.batchFetchIdx = 0;
  }

  public String getType() {
    return this.type;
  }

  public TSFetchMetadataReq setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getColumnPath() {
    return this.columnPath;
  }

  public TSFetchMetadataReq setColumnPath(String columnPath) {
    this.columnPath = columnPath;
    return this;
  }

  public void unsetColumnPath() {
    this.columnPath = null;
  }

  /** Returns true if field columnPath is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnPath() {
    return this.columnPath != null;
  }

  public void setColumnPathIsSet(boolean value) {
    if (!value) {
      this.columnPath = null;
    }
  }

  public int getBatchFetchIdx() {
    return this.batchFetchIdx;
  }

  public TSFetchMetadataReq setBatchFetchIdx(int batchFetchIdx) {
    this.batchFetchIdx = batchFetchIdx;
    setBatchFetchIdxIsSet(true);
    return this;
  }

  public void unsetBatchFetchIdx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATCHFETCHIDX_ISSET_ID);
  }

  /** Returns true if field batchFetchIdx is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchFetchIdx() {
    return EncodingUtils.testBit(__isset_bitfield, __BATCHFETCHIDX_ISSET_ID);
  }

  public void setBatchFetchIdxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATCHFETCHIDX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case COLUMN_PATH:
      if (value == null) {
        unsetColumnPath();
      } else {
        setColumnPath((String)value);
      }
      break;

    case BATCH_FETCH_IDX:
      if (value == null) {
        unsetBatchFetchIdx();
      } else {
        setBatchFetchIdx((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case COLUMN_PATH:
      return getColumnPath();

    case BATCH_FETCH_IDX:
      return Integer.valueOf(getBatchFetchIdx());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case COLUMN_PATH:
      return isSetColumnPath();
    case BATCH_FETCH_IDX:
      return isSetBatchFetchIdx();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSFetchMetadataReq)
      return this.equals((TSFetchMetadataReq)that);
    return false;
  }

  public boolean equals(TSFetchMetadataReq that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_columnPath = true && this.isSetColumnPath();
    boolean that_present_columnPath = true && that.isSetColumnPath();
    if (this_present_columnPath || that_present_columnPath) {
      if (!(this_present_columnPath && that_present_columnPath))
        return false;
      if (!this.columnPath.equals(that.columnPath))
        return false;
    }

    boolean this_present_batchFetchIdx = true && this.isSetBatchFetchIdx();
    boolean that_present_batchFetchIdx = true && that.isSetBatchFetchIdx();
    if (this_present_batchFetchIdx || that_present_batchFetchIdx) {
      if (!(this_present_batchFetchIdx && that_present_batchFetchIdx))
        return false;
      if (this.batchFetchIdx != that.batchFetchIdx)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TSFetchMetadataReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnPath()).compareTo(other.isSetColumnPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnPath, other.columnPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchFetchIdx()).compareTo(other.isSetBatchFetchIdx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchFetchIdx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchFetchIdx, other.batchFetchIdx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSFetchMetadataReq(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetColumnPath()) {
      if (!first) sb.append(", ");
      sb.append("columnPath:");
      if (this.columnPath == null) {
        sb.append("null");
      } else {
        sb.append(this.columnPath);
      }
      first = false;
    }
    if (isSetBatchFetchIdx()) {
      if (!first) sb.append(", ");
      sb.append("batchFetchIdx:");
      sb.append(this.batchFetchIdx);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSFetchMetadataReqStandardSchemeFactory implements SchemeFactory {
    public TSFetchMetadataReqStandardScheme getScheme() {
      return new TSFetchMetadataReqStandardScheme();
    }
  }

  private static class TSFetchMetadataReqStandardScheme extends StandardScheme<TSFetchMetadataReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSFetchMetadataReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnPath = iprot.readString();
              struct.setColumnPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BATCH_FETCH_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batchFetchIdx = iprot.readI32();
              struct.setBatchFetchIdxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSFetchMetadataReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.columnPath != null) {
        if (struct.isSetColumnPath()) {
          oprot.writeFieldBegin(COLUMN_PATH_FIELD_DESC);
          oprot.writeString(struct.columnPath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBatchFetchIdx()) {
        oprot.writeFieldBegin(BATCH_FETCH_IDX_FIELD_DESC);
        oprot.writeI32(struct.batchFetchIdx);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSFetchMetadataReqTupleSchemeFactory implements SchemeFactory {
    public TSFetchMetadataReqTupleScheme getScheme() {
      return new TSFetchMetadataReqTupleScheme();
    }
  }

  private static class TSFetchMetadataReqTupleScheme extends TupleScheme<TSFetchMetadataReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSFetchMetadataReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.type);
      BitSet optionals = new BitSet();
      if (struct.isSetColumnPath()) {
        optionals.set(0);
      }
      if (struct.isSetBatchFetchIdx()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetColumnPath()) {
        oprot.writeString(struct.columnPath);
      }
      if (struct.isSetBatchFetchIdx()) {
        oprot.writeI32(struct.batchFetchIdx);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSFetchMetadataReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = iprot.readString();
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.columnPath = iprot.readString();
        struct.setColumnPathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.batchFetchIdx = iprot.readI32();
        struct.setBatchFetchIdxIsSet(true);
      }
    }
  }

}

